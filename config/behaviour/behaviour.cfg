interface Node (enumRef='behaviour.nodeenum', defaultImp='Sequence', pack) {
	struct SubTree {
		subTreeId:int ->behaviour;
		paramBBKeys:list<str> (pack);
		returnValueBBKey:str;
	}

	struct Success {
		validOnFinish:bool;
		node:Node;
	}

	struct Failure {
		validOnFinish:bool;
		node:Node;
	}

	struct EndTree {
		status:int -> statusenum;
	}

	struct WaitTimeMs {
		timeMs:ExpNumber;
	}

	struct NodeNot {
		validOnFinish:bool;
		node:Node;
	}

	struct Log {
		validOnFinish:bool;
		node:Node;
		msg:str;
	}

	struct Loop {
		validOnFinish:bool;
		node:Node;
		loopNum:int;
	}

	struct LoopUtil {
		validOnFinish:bool;
		cond:Condition;
		node:Node;
	}

	struct Timed {
		validOnFinish:bool;
		timeMs:ExpNumber;
		node:Node;
	}

	struct NodeCondition {
		cond:Condition;
	}

	struct Sequence {
		precond:Condition;
		nodes:list<Node> (pack);
	}

	struct Selector {
		precond:Condition;
		nodes:list<Node> (pack);
	}

	struct Parallel {
		oneSuccAllSucc:bool;
		oneFailAllFail:bool;
		nodes:list<Node> (pack);
	}
	
	struct ActDebugLog {
		msg:str;
	}

	struct ActSetBBNumber {
		bbKey:str;
		value:ExpNumber;
	}
	
	struct ActSetBBObj {
		bbKey:str;
		value:ExpObj;
	}
	
	struct ActSetBBStr {
		bbKey:str;
		value:ExpStr;
	}
}

interface Condition (enumRef='behaviour.conditionenum', pack, defaultImp='NULL') {

	struct NULL {
	}
	
	struct Success {
	}
	
	struct Failure {
	}
	
	struct Compare {
		left:ExpNumber;
		right:ExpNumber;
		comarator:int ->compareenum;
	}

	struct StrEqual {
		left:ExpStr;
		right:ExpStr;
	}

	struct ObjEqual {
		left:ExpObj;
		right:ExpObj;
	}

	struct Not {
		cond:Condition;
	}

	struct And {
		cond1:Condition;
		cond2:Condition;
	}

	struct Or {
		cond1:Condition;
		cond2:Condition;
	}
	
	
}

interface ExpNumber (enumRef='behaviour.expnumberenum', pack, defaultImp='Const') {
	struct ConstFloat {
		value:float;
	}
	
	struct ConstInteger {
		value:int;
	}
	
	struct ConstLong {
		value:long;
	}

	struct getBBNumber {
		bbKey:str;
	}
	
	struct Calculate {
		left:ExpNumber;
		right:ExpNumber;
		calculator:int -> calculatorenum;
	}

}

interface ExpStr (enumRef='behaviour.expstrenum', defaultImp='Const') {
	struct Const {
		value:str;
	}

	struct getBBStr {
		bbKey:str;
	}

}

interface ExpObj (enumRef='behaviour.expobjenum') {
	struct getBBObj {
		bbKey:str;
	}

}

struct BBParam {
	bbType:int ->typeenum;
	bbKey:str;
}

table behaviour[id] (json) {
	id:int;
	name:str; // 行为树名
	objType:int;
	params:list<BBParam> (pack); // 参数
	returnValue:BBParam (pack); // 返回值
	node:Node (pack); // 节点
}

table compareenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table calculatorenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table statusenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table conditionenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table expnumberenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table expstrenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table expobjenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table nodeenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
	nodeType:int ->nodetypeenum; // 节点类型(编辑器显示使用,不参与逻辑)
}

table nodetypeenum[id] (enum='ename') {
	id:int;
	ename:str; // 枚举名
}

table typeenum[id] {
	id:int;
	ename:str; // 枚举名
}

